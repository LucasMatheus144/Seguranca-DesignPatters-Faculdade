// <auto-generated />
using System;
using EspacoPotencial.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace EspacoPotencial.Migrations
{
    [DbContext(typeof(ApaDbContext))]
    [Migration("20240506015923_Acess")]
    partial class Acess
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EspacoPotencial.Areas.Cadastro.Models.Financeiro.armazem", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int>("funcionario_id")
                        .HasColumnType("integer");

                    b.Property<string>("nome")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int>("qntdelimite")
                        .HasColumnType("integer");

                    b.Property<int>("tipo_armazem")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("funcionario_id");

                    b.HasIndex("tipo_armazem");

                    b.ToTable("armazem", "estoque");
                });

            modelBuilder.Entity("EspacoPotencial.Areas.Cadastro.Models.Financeiro.cc", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("cc_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ContaCorrenteData")
                        .HasColumnType("timestamp")
                        .HasColumnName("cc_data");

                    b.Property<char>("ContaCorrenteDebitoCredito")
                        .HasMaxLength(1)
                        .HasColumnType("character(1)")
                        .HasColumnName("cc_deb_cred");

                    b.Property<float>("ContaCorrenteValor")
                        .HasColumnType("real")
                        .HasColumnName("cc_valor");

                    b.Property<int>("ContaCorrenteVendaId")
                        .HasColumnType("integer")
                        .HasColumnName("cc_venda_id");

                    b.Property<char>("ContaCorrenteVendaIdOrigem")
                        .HasMaxLength(1)
                        .HasColumnType("character(1)")
                        .HasColumnName("cc_venda_id_origem");

                    b.Property<int?>("geral_tipo")
                        .HasColumnType("integer");

                    b.Property<int?>("movimento_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("geral_tipo");

                    b.HasIndex("movimento_id");

                    b.ToTable("cc", "financeiro");
                });

            modelBuilder.Entity("EspacoPotencial.Areas.Cadastro.Models.Financeiro.cta_receber", b =>
                {
                    b.Property<int>("ContaReceberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("cta_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ContaReceberId"));

                    b.Property<decimal>("CtaJuros")
                        .HasColumnType("numeric")
                        .HasColumnName("cta_juros");

                    b.Property<decimal>("CtaMulta")
                        .HasColumnType("numeric")
                        .HasColumnName("cta_multa");

                    b.Property<DateTime>("CtaPagamento")
                        .HasColumnType("timestamp")
                        .HasColumnName("cta_pagto");

                    b.Property<int>("CtaReceberBaixa")
                        .HasColumnType("integer")
                        .HasColumnName("cta_receber_baixa");

                    b.Property<decimal>("CtaValor")
                        .HasColumnType("numeric")
                        .HasColumnName("cta_valor");

                    b.Property<int>("MovimentoId")
                        .HasColumnType("integer")
                        .HasColumnName("movimento_id");

                    b.Property<int>("MovimentoParcelas")
                        .HasColumnType("integer")
                        .HasColumnName("movimento_parcelas");

                    b.Property<char>("MovimentoTipo")
                        .HasMaxLength(1)
                        .HasColumnType("character(1)")
                        .HasColumnName("movimento_tipo");

                    b.Property<int?>("movimento_id")
                        .HasColumnType("integer")
                        .HasColumnName("movimento_id1");

                    b.Property<int?>("movimento_parcelas")
                        .HasColumnType("integer")
                        .HasColumnName("movimento_parcelas1");

                    b.Property<int?>("movimento_tipo")
                        .HasColumnType("integer")
                        .HasColumnName("movimento_tipo1");

                    b.HasKey("ContaReceberId");

                    b.HasIndex("movimento_id");

                    b.HasIndex("movimento_parcelas");

                    b.HasIndex("movimento_tipo");

                    b.ToTable("cta_receber", "financeiro");
                });

            modelBuilder.Entity("EspacoPotencial.Areas.Cadastro.Models.Financeiro.eventos", b =>
                {
                    b.Property<int>("eventos_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("eventos_id"));

                    b.Property<DateTime>("evento_data_fin")
                        .HasColumnType("timestamp");

                    b.Property<DateTime>("evento_data_ini")
                        .HasColumnType("timestamp");

                    b.Property<string>("evento_nome")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("eventos_id");

                    b.ToTable("eventos", "financeiro");
                });

            modelBuilder.Entity("EspacoPotencial.Areas.Cadastro.Models.Financeiro.grupo_permitido", b =>
                {
                    b.Property<int>("grp_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("grp_id"));

                    b.Property<string>("grp_descricao")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("grp_id");

                    b.ToTable("grupo_permitido", "financeiro");
                });

            modelBuilder.Entity("EspacoPotencial.Areas.Cadastro.Models.Financeiro.item", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("descricao")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("estoque_id")
                        .HasColumnType("integer");

                    b.Property<int>("qntdeunitario")
                        .HasColumnType("integer");

                    b.Property<string>("situacao")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)");

                    b.Property<int>("tipo_armazem")
                        .HasColumnType("integer");

                    b.Property<decimal?>("valorunitario")
                        .HasMaxLength(2)
                        .HasColumnType("numeric");

                    b.HasKey("id");

                    b.HasIndex("estoque_id");

                    b.HasIndex("tipo_armazem");

                    b.ToTable("item", "estoque");
                });

            modelBuilder.Entity("EspacoPotencial.Areas.Cadastro.Models.Financeiro.movimentacao", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<DateTime>("data_retirada")
                        .HasColumnType("timestamp");

                    b.Property<string>("descricao")
                        .HasColumnType("text");

                    b.Property<DateTime?>("devolvido")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("item_id")
                        .HasColumnType("integer");

                    b.Property<DateTime>("previsao_devolvido")
                        .HasColumnType("timestamp");

                    b.Property<int>("usuario_id")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("item_id");

                    b.HasIndex("usuario_id");

                    b.ToTable("movimentacao_item", "estoque");
                });

            modelBuilder.Entity("EspacoPotencial.Areas.Cadastro.Models.Financeiro.movimento_produtos", b =>
                {
                    b.Property<int>("movimento_id")
                        .HasColumnType("integer")
                        .HasColumnName("movimento_id");

                    b.Property<int>("ProdutosQuantidade")
                        .HasColumnType("integer")
                        .HasColumnName("produtos_qntde");

                    b.Property<decimal>("ProdutosValorTotal")
                        .HasColumnType("numeric")
                        .HasColumnName("produtos_vl_total");

                    b.Property<decimal>("ProdutosValorUnitario")
                        .HasColumnType("numeric")
                        .HasColumnName("produtos_vl_unit");

                    b.Property<int>("produto_evento_id")
                        .HasColumnType("integer");

                    b.Property<int>("produto_geral_id")
                        .HasColumnType("integer");

                    b.HasKey("movimento_id");

                    b.HasIndex("produto_evento_id");

                    b.HasIndex("produto_geral_id");

                    b.ToTable("movimento_produtos", "financeiro");
                });

            modelBuilder.Entity("EspacoPotencial.Areas.Cadastro.Models.Financeiro.movimento_venda", b =>
                {
                    b.Property<int>("movimento_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("movimento_id"));

                    b.Property<int>("geral_id")
                        .HasColumnType("integer");

                    b.Property<string>("geral_tipo")
                        .HasColumnType("text");

                    b.Property<DateTime>("movimento_data")
                        .HasColumnType("timestamp");

                    b.Property<DateTime?>("movimento_data_estorno")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("movimento_dia_vencto")
                        .HasColumnType("integer");

                    b.Property<string>("movimento_email")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<string>("movimento_outro")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<int>("movimento_parcelas")
                        .HasColumnType("integer");

                    b.Property<string>("movimento_tipo")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)");

                    b.Property<string>("movimento_tipo_pagto")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)");

                    b.Property<decimal>("movimento_valor")
                        .HasColumnType("numeric");

                    b.HasKey("movimento_id");

                    b.HasIndex("geral_id");

                    b.ToTable("movimento_venda", "financeiro");
                });

            modelBuilder.Entity("EspacoPotencial.Areas.Cadastro.Models.Financeiro.produtos", b =>
                {
                    b.Property<int>("produtos_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("produtos_id"));

                    b.Property<string>("produtos_descricao")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("produtos_evento")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)");

                    b.Property<int>("produtos_qtde_unit")
                        .HasColumnType("integer");

                    b.Property<string>("produtos_unidade")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)");

                    b.HasKey("produtos_id");

                    b.ToTable("produtos", "financeiro");
                });

            modelBuilder.Entity("EspacoPotencial.Areas.Cadastro.Models.Financeiro.produtos_evento", b =>
                {
                    b.Property<int>("prod_evento_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("prod_evento_id"));

                    b.Property<int>("eventos_id")
                        .HasColumnType("integer")
                        .HasColumnName("eventos_id");

                    b.Property<int>("grp_id")
                        .HasColumnType("integer")
                        .HasColumnName("grp_id");

                    b.Property<decimal>("prod_evento_valor_uni")
                        .HasColumnType("numeric");

                    b.Property<int>("produtos_id")
                        .HasColumnType("integer");

                    b.HasKey("prod_evento_id");

                    b.HasIndex("eventos_id");

                    b.HasIndex("grp_id");

                    b.HasIndex("produtos_id");

                    b.ToTable("produtos_evento", "financeiro");
                });

            modelBuilder.Entity("EspacoPotencial.Areas.Cadastro.Models.Financeiro.produtos_geral", b =>
                {
                    b.Property<int>("produto_geral_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("produto_geral_id"));

                    b.Property<int>("grp_id")
                        .HasColumnType("integer");

                    b.Property<decimal>("produto_geral_valor_uni")
                        .HasColumnType("numeric");

                    b.Property<int>("produto_id")
                        .HasColumnType("integer");

                    b.HasKey("produto_geral_id");

                    b.HasIndex("grp_id");

                    b.HasIndex("produto_id");

                    b.ToTable("produtos_geral", "financeiro");
                });

            modelBuilder.Entity("EspacoPotencial.Areas.Cadastro.Models.Financeiro.tipo", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("descricao")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("nome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("tipo", "estoque");
                });

            modelBuilder.Entity("EspacoPotencial.Areas.Cadastro.Models.Funcionarios.atestado_medico", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Data")
                        .HasColumnType("timestamp");

                    b.Property<string>("Dias")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)");

                    b.Property<int>("cid_id")
                        .HasColumnType("integer");

                    b.Property<int>("funcionario_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("cid_id");

                    b.HasIndex("funcionario_id");

                    b.ToTable("atestado_medico", "funcionario");
                });

            modelBuilder.Entity("EspacoPotencial.Areas.Cadastro.Models.Funcionarios.banco", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("banco", "funcionario");
                });

            modelBuilder.Entity("EspacoPotencial.Areas.Cadastro.Models.Funcionarios.cargo_funcionario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DataFinal")
                        .HasColumnType("timestamp");

                    b.Property<DateTime>("DataInicial")
                        .HasColumnType("timestamp");

                    b.Property<string>("Observacao")
                        .HasColumnType("text");

                    b.Property<string>("Situacao")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)");

                    b.Property<int>("cargos_id")
                        .HasColumnType("integer");

                    b.Property<int>("funcionario_id")
                        .HasColumnType("integer");

                    b.Property<int?>("motivo_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("cargos_id");

                    b.HasIndex("funcionario_id");

                    b.HasIndex("motivo_id");

                    b.ToTable("cargo_funcionario", "funcionario");
                });

            modelBuilder.Entity("EspacoPotencial.Areas.Cadastro.Models.Funcionarios.cargos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("cargos", "funcionario");
                });

            modelBuilder.Entity("EspacoPotencial.Areas.Cadastro.Models.Funcionarios.centro_custo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("centro_custo", "funcionario");
                });

            modelBuilder.Entity("EspacoPotencial.Areas.Cadastro.Models.Funcionarios.cid", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("cid", "funcionario");
                });

            modelBuilder.Entity("EspacoPotencial.Areas.Cadastro.Models.Funcionarios.epi", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("Validade")
                        .HasColumnType("timestamp");

                    b.HasKey("Id");

                    b.ToTable("epi", "funcionario");
                });

            modelBuilder.Entity("EspacoPotencial.Areas.Cadastro.Models.Funcionarios.epi_funcionario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Entrega")
                        .HasColumnType("timestamp");

                    b.Property<DateTime>("Vencimento")
                        .HasColumnType("timestamp");

                    b.Property<int>("epi_geral_id")
                        .HasColumnType("integer");

                    b.Property<int>("funcionario_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("epi_geral_id");

                    b.HasIndex("funcionario_id");

                    b.ToTable("epi_funcionario", "funcionario");
                });

            modelBuilder.Entity("EspacoPotencial.Areas.Cadastro.Models.Funcionarios.exame_medico", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DataAgendada")
                        .HasColumnType("timestamp");

                    b.Property<DateTime?>("DataExecuta")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Exame")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)");

                    b.Property<int>("funcionario_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("funcionario_id");

                    b.ToTable("exame_medico", "funcionario");
                });

            modelBuilder.Entity("EspacoPotencial.Areas.Cadastro.Models.Funcionarios.funcionario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Agencia")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)");

                    b.Property<string>("CestaBasica")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)");

                    b.Property<string>("Conta")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("character varying(11)");

                    b.Property<string>("Escolaridade")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)");

                    b.Property<DateTime>("Formacao")
                        .HasColumnType("timestamp");

                    b.Property<byte[]>("Foto")
                        .HasColumnType("bytea");

                    b.Property<DateTime>("Nascimento")
                        .HasColumnType("timestamp");

                    b.Property<string>("Rg")
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)");

                    b.Property<int>("banco_id")
                        .HasColumnType("integer");

                    b.Property<int>("centrocusto_id")
                        .HasColumnType("integer");

                    b.Property<int>("geral_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("banco_id");

                    b.HasIndex("centrocusto_id");

                    b.HasIndex("geral_id");

                    b.ToTable("funcionario", "funcionario");
                });

            modelBuilder.Entity("EspacoPotencial.Areas.Cadastro.Models.Funcionarios.motivo_desligamento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("motivo_desligamento", "funcionario");
                });

            modelBuilder.Entity("EspacoPotencial.Areas.Cadastro.Models.Public.geral", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Cep")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("character varying(9)");

                    b.Property<string>("Cidade")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Complemento")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("timestamp");

                    b.Property<string>("Docto")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Email1")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<string>("Email2")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<string>("Endereco")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Numero")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)");

                    b.Property<string>("Situacao")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)");

                    b.Property<string>("Telefone1")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("character varying(14)");

                    b.Property<string>("Telefone2")
                        .HasMaxLength(14)
                        .HasColumnType("character varying(14)");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)");

                    b.HasKey("Id");

                    b.ToTable("geral");
                });

            modelBuilder.Entity("EspacoPotencial.Areas.Cadastro.Models.Usuarios.beneficio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("beneficio", "usuarios");
                });

            modelBuilder.Entity("EspacoPotencial.Areas.Cadastro.Models.Usuarios.calendario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("calendario_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("datas_id")
                        .HasColumnType("integer");

                    b.Property<int>("sala_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("datas_id");

                    b.HasIndex("sala_id");

                    b.ToTable("calendario", "usuarios");
                });

            modelBuilder.Entity("EspacoPotencial.Areas.Cadastro.Models.Usuarios.comorbidade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("comorbidade", "usuarios");
                });

            modelBuilder.Entity("EspacoPotencial.Areas.Cadastro.Models.Usuarios.comorbidade_usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("comorbidade_id")
                        .HasColumnType("integer");

                    b.Property<int>("usuario_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("comorbidade_id");

                    b.HasIndex("usuario_id");

                    b.ToTable("comorbidade_usuario", "usuarios");
                });

            modelBuilder.Entity("EspacoPotencial.Areas.Cadastro.Models.Usuarios.convenio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("convenio", "usuarios");
                });

            modelBuilder.Entity("EspacoPotencial.Areas.Cadastro.Models.Usuarios.datas", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("datas_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Ano")
                        .HasMaxLength(4)
                        .HasColumnType("character varying(4)");

                    b.Property<DateTime>("DataFinal")
                        .HasColumnType("timestamp");

                    b.Property<DateTime>("DataInicio")
                        .HasColumnType("timestamp");

                    b.Property<string>("Descritivo")
                        .HasColumnType("text");

                    b.Property<string>("Tipo")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)");

                    b.HasKey("Id");

                    b.ToTable("datas", "usuarios");
                });

            modelBuilder.Entity("EspacoPotencial.Areas.Cadastro.Models.Usuarios.desligamento_motivos_usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Motivo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("desligamento_motivos_usuario", "usuarios");
                });

            modelBuilder.Entity("EspacoPotencial.Areas.Cadastro.Models.Usuarios.dias_terapia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DataFinal")
                        .HasColumnType("timestamp");

                    b.Property<DateTime>("DataInicial")
                        .HasColumnType("timestamp")
                        .HasColumnName("terapia_data_inicial");

                    b.Property<int>("geral_id")
                        .HasColumnType("integer");

                    b.Property<bool>("quarta")
                        .HasColumnType("boolean");

                    b.Property<bool>("quinta")
                        .HasColumnType("boolean");

                    b.Property<bool>("segunda")
                        .HasColumnType("boolean");

                    b.Property<bool>("sexta")
                        .HasColumnType("boolean");

                    b.Property<bool>("terca")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("geral_id");

                    b.ToTable("dias_terapia", "usuarios");
                });

            modelBuilder.Entity("EspacoPotencial.Areas.Cadastro.Models.Usuarios.educador_sala", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Final")
                        .HasColumnType("timestamp");

                    b.Property<DateTime>("Inicio")
                        .HasColumnType("timestamp");

                    b.Property<int>("funcionario_id")
                        .HasColumnType("integer");

                    b.Property<int>("sala_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("funcionario_id");

                    b.HasIndex("sala_id");

                    b.ToTable("educador_sala", "usuarios");
                });

            modelBuilder.Entity("EspacoPotencial.Areas.Cadastro.Models.Usuarios.escolas", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Cidade")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("character varying(14)");

                    b.HasKey("Id");

                    b.ToTable("escolas", "usuarios");
                });

            modelBuilder.Entity("EspacoPotencial.Areas.Cadastro.Models.Usuarios.frequencia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Data")
                        .HasColumnType("timestamp");

                    b.Property<string>("Observacao")
                        .HasColumnType("text");

                    b.Property<bool>("Registro")
                        .HasColumnType("boolean");

                    b.Property<int>("sala_id")
                        .HasColumnType("integer");

                    b.Property<int>("usuario_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("sala_id");

                    b.HasIndex("usuario_id");

                    b.ToTable("frequencia", "usuarios");
                });

            modelBuilder.Entity("EspacoPotencial.Areas.Cadastro.Models.Usuarios.motorista", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CapacidadeVeiculo")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)");

                    b.Property<string>("Cpf")
                        .HasMaxLength(14)
                        .HasColumnType("character varying(14)");

                    b.Property<string>("Nome")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Observacao")
                        .HasColumnType("text");

                    b.Property<string>("PlacaVeiculo")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)");

                    b.Property<string>("Rg")
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)");

                    b.Property<string>("Situacao")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)");

                    b.HasKey("Id");

                    b.ToTable("motorista", "usuarios");
                });

            modelBuilder.Entity("EspacoPotencial.Areas.Cadastro.Models.Usuarios.responsavel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("LocalTrabalho")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<string>("Observacao")
                        .HasColumnType("text");

                    b.Property<string>("Retira")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)");

                    b.Property<string>("Vinculo")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)");

                    b.Property<int>("funcionario_id")
                        .HasColumnType("integer");

                    b.Property<int?>("geral_func")
                        .HasColumnType("integer");

                    b.Property<int>("geral_id")
                        .HasColumnType("integer");

                    b.Property<int>("usuario_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("funcionario_id");

                    b.HasIndex("geral_id");

                    b.HasIndex("usuario_id");

                    b.ToTable("responsavel", "usuarios");
                });

            modelBuilder.Entity("EspacoPotencial.Areas.Cadastro.Models.Usuarios.sala", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Periodo")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)");

                    b.Property<int>("funcionario_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("funcionario_id");

                    b.ToTable("sala", "usuarios");
                });

            modelBuilder.Entity("EspacoPotencial.Areas.Cadastro.Models.Usuarios.salas_diario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Nota")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Periodo")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)");

                    b.Property<int>("sala_id")
                        .HasColumnType("integer")
                        .HasColumnName("sala_id");

                    b.HasKey("Id");

                    b.HasIndex("sala_id");

                    b.ToTable("salas_diario", "usuarios");
                });

            modelBuilder.Entity("EspacoPotencial.Areas.Cadastro.Models.Usuarios.usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Alergia")
                        .HasColumnType("text");

                    b.Property<DateTime>("DataDesligamento")
                        .HasColumnType("timestamp");

                    b.Property<DateTime>("DataLaudo")
                        .HasColumnType("timestamp");

                    b.Property<byte[]>("Foto")
                        .HasColumnType("bytea");

                    b.Property<string>("HistoricoContato")
                        .HasColumnType("text");

                    b.Property<DateTime>("Ingresso")
                        .HasColumnType("timestamp")
                        .HasColumnName("usuario_ingresso");

                    b.Property<string>("Medicacao")
                        .HasColumnType("text")
                        .HasColumnName("usuario_medicacao");

                    b.Property<DateTime>("Nascimento")
                        .HasColumnType("timestamp");

                    b.Property<string>("RestricaoAlimentar")
                        .HasColumnType("text");

                    b.Property<string>("Serie")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)");

                    b.Property<string>("Situacao")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)");

                    b.Property<string>("Sus")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("Transporte")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)");

                    b.Property<int>("beneficio_id")
                        .HasColumnType("integer");

                    b.Property<int>("comorbidade_id")
                        .HasColumnType("integer");

                    b.Property<int?>("desligamento_id")
                        .HasColumnType("integer");

                    b.Property<int>("escolas_id")
                        .HasColumnType("integer");

                    b.Property<int>("geral_id")
                        .HasColumnType("integer");

                    b.Property<string>("usuario_descritivo_desligamento")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("beneficio_id");

                    b.HasIndex("comorbidade_id");

                    b.HasIndex("desligamento_id");

                    b.HasIndex("escolas_id");

                    b.HasIndex("geral_id");

                    b.ToTable("usuario", "usuarios");
                });

            modelBuilder.Entity("EspacoPotencial.Areas.Cadastro.Models.Usuarios.usuario_motorista", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DataFinal")
                        .HasColumnType("timestamp");

                    b.Property<DateTime>("DataInicial")
                        .HasColumnType("timestamp");

                    b.Property<string>("Observacao")
                        .HasColumnType("text");

                    b.Property<int>("motorista_id")
                        .HasColumnType("integer");

                    b.Property<int>("usuario_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("motorista_id");

                    b.HasIndex("usuario_id");

                    b.ToTable("usuario_motorista", "usuarios");
                });

            modelBuilder.Entity("EspacoPotencial.Areas.Cadastro.Models.Usuarios.usuario_sala", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Final")
                        .HasColumnType("timestamp");

                    b.Property<DateTime>("Inicio")
                        .HasColumnType("timestamp");

                    b.Property<string>("Periodo")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)");

                    b.Property<int>("geral_id")
                        .HasColumnType("integer");

                    b.Property<int>("sala_id")
                        .HasColumnType("integer");

                    b.Property<int>("usuario_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("geral_id");

                    b.HasIndex("sala_id");

                    b.HasIndex("usuario_id");

                    b.ToTable("usuario_sala", "usuarios");
                });

            modelBuilder.Entity("EspacoPotencial.Models.Account.AcessUsers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<TimeSpan>("AccessDuration")
                        .HasColumnType("interval");

                    b.Property<DateTime>("LoginTime")
                        .HasColumnType("timestamp");

                    b.Property<DateTime>("LogoutTime")
                        .HasColumnType("timestamp");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("AcessUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("EspacoPotencial.Areas.Cadastro.Models.Financeiro.armazem", b =>
                {
                    b.HasOne("EspacoPotencial.Areas.Cadastro.Models.Funcionarios.funcionario", "funcionario")
                        .WithMany()
                        .HasForeignKey("funcionario_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EspacoPotencial.Areas.Cadastro.Models.Financeiro.tipo", "tipo")
                        .WithMany()
                        .HasForeignKey("tipo_armazem")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("funcionario");

                    b.Navigation("tipo");
                });

            modelBuilder.Entity("EspacoPotencial.Areas.Cadastro.Models.Financeiro.cc", b =>
                {
                    b.HasOne("EspacoPotencial.Areas.Cadastro.Models.Financeiro.movimento_venda", "MovimentoVenda_tipo")
                        .WithMany()
                        .HasForeignKey("geral_tipo");

                    b.HasOne("EspacoPotencial.Areas.Cadastro.Models.Financeiro.movimento_venda", "MovimentoVenda_id")
                        .WithMany()
                        .HasForeignKey("movimento_id");

                    b.Navigation("MovimentoVenda_id");

                    b.Navigation("MovimentoVenda_tipo");
                });

            modelBuilder.Entity("EspacoPotencial.Areas.Cadastro.Models.Financeiro.cta_receber", b =>
                {
                    b.HasOne("EspacoPotencial.Areas.Cadastro.Models.Financeiro.movimento_venda", "MovimentoVenda")
                        .WithMany()
                        .HasForeignKey("movimento_id");

                    b.HasOne("EspacoPotencial.Areas.Cadastro.Models.Financeiro.movimento_venda", "MovimentoVenda_parcela")
                        .WithMany()
                        .HasForeignKey("movimento_parcelas");

                    b.HasOne("EspacoPotencial.Areas.Cadastro.Models.Financeiro.movimento_venda", "MovimentoVenda_tipo")
                        .WithMany()
                        .HasForeignKey("movimento_tipo");

                    b.Navigation("MovimentoVenda");

                    b.Navigation("MovimentoVenda_parcela");

                    b.Navigation("MovimentoVenda_tipo");
                });

            modelBuilder.Entity("EspacoPotencial.Areas.Cadastro.Models.Financeiro.item", b =>
                {
                    b.HasOne("EspacoPotencial.Areas.Cadastro.Models.Financeiro.armazem", "armazem")
                        .WithMany()
                        .HasForeignKey("estoque_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EspacoPotencial.Areas.Cadastro.Models.Financeiro.tipo", "tipo")
                        .WithMany()
                        .HasForeignKey("tipo_armazem")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("armazem");

                    b.Navigation("tipo");
                });

            modelBuilder.Entity("EspacoPotencial.Areas.Cadastro.Models.Financeiro.movimentacao", b =>
                {
                    b.HasOne("EspacoPotencial.Areas.Cadastro.Models.Financeiro.item", "item")
                        .WithMany()
                        .HasForeignKey("item_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EspacoPotencial.Areas.Cadastro.Models.Usuarios.usuario", "usuario")
                        .WithMany()
                        .HasForeignKey("usuario_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("item");

                    b.Navigation("usuario");
                });

            modelBuilder.Entity("EspacoPotencial.Areas.Cadastro.Models.Financeiro.movimento_produtos", b =>
                {
                    b.HasOne("EspacoPotencial.Areas.Cadastro.Models.Financeiro.movimento_venda", "MovimentoVenda")
                        .WithMany()
                        .HasForeignKey("movimento_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EspacoPotencial.Areas.Cadastro.Models.Financeiro.produtos_evento", "ProdutoEvento")
                        .WithMany()
                        .HasForeignKey("produto_evento_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EspacoPotencial.Areas.Cadastro.Models.Financeiro.produtos_geral", "ProdutoGeral")
                        .WithMany()
                        .HasForeignKey("produto_geral_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MovimentoVenda");

                    b.Navigation("ProdutoEvento");

                    b.Navigation("ProdutoGeral");
                });

            modelBuilder.Entity("EspacoPotencial.Areas.Cadastro.Models.Financeiro.movimento_venda", b =>
                {
                    b.HasOne("EspacoPotencial.Areas.Cadastro.Models.Public.geral", "Geral")
                        .WithMany()
                        .HasForeignKey("geral_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Geral");
                });

            modelBuilder.Entity("EspacoPotencial.Areas.Cadastro.Models.Financeiro.produtos_evento", b =>
                {
                    b.HasOne("EspacoPotencial.Areas.Cadastro.Models.Financeiro.eventos", "Evento")
                        .WithMany()
                        .HasForeignKey("eventos_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EspacoPotencial.Areas.Cadastro.Models.Financeiro.grupo_permitido", "GrupoPermitido")
                        .WithMany()
                        .HasForeignKey("grp_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EspacoPotencial.Areas.Cadastro.Models.Financeiro.produtos", "Produto")
                        .WithMany()
                        .HasForeignKey("produtos_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Evento");

                    b.Navigation("GrupoPermitido");

                    b.Navigation("Produto");
                });

            modelBuilder.Entity("EspacoPotencial.Areas.Cadastro.Models.Financeiro.produtos_geral", b =>
                {
                    b.HasOne("EspacoPotencial.Areas.Cadastro.Models.Financeiro.grupo_permitido", "GrupoPermitido")
                        .WithMany()
                        .HasForeignKey("grp_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EspacoPotencial.Areas.Cadastro.Models.Financeiro.produtos", "Produto")
                        .WithMany()
                        .HasForeignKey("produto_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GrupoPermitido");

                    b.Navigation("Produto");
                });

            modelBuilder.Entity("EspacoPotencial.Areas.Cadastro.Models.Funcionarios.atestado_medico", b =>
                {
                    b.HasOne("EspacoPotencial.Areas.Cadastro.Models.Funcionarios.cid", "Cid")
                        .WithMany()
                        .HasForeignKey("cid_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EspacoPotencial.Areas.Cadastro.Models.Funcionarios.funcionario", "funcionario")
                        .WithMany()
                        .HasForeignKey("funcionario_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cid");

                    b.Navigation("funcionario");
                });

            modelBuilder.Entity("EspacoPotencial.Areas.Cadastro.Models.Funcionarios.cargo_funcionario", b =>
                {
                    b.HasOne("EspacoPotencial.Areas.Cadastro.Models.Funcionarios.cargos", "cargos")
                        .WithMany()
                        .HasForeignKey("cargos_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EspacoPotencial.Areas.Cadastro.Models.Funcionarios.funcionario", "funcionario")
                        .WithMany()
                        .HasForeignKey("funcionario_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EspacoPotencial.Areas.Cadastro.Models.Funcionarios.motivo_desligamento", "motivo_desligamento")
                        .WithMany()
                        .HasForeignKey("motivo_id");

                    b.Navigation("cargos");

                    b.Navigation("funcionario");

                    b.Navigation("motivo_desligamento");
                });

            modelBuilder.Entity("EspacoPotencial.Areas.Cadastro.Models.Funcionarios.epi_funcionario", b =>
                {
                    b.HasOne("EspacoPotencial.Areas.Cadastro.Models.Funcionarios.epi", "epi_geral")
                        .WithMany()
                        .HasForeignKey("epi_geral_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EspacoPotencial.Areas.Cadastro.Models.Funcionarios.funcionario", "Funcionario")
                        .WithMany()
                        .HasForeignKey("funcionario_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Funcionario");

                    b.Navigation("epi_geral");
                });

            modelBuilder.Entity("EspacoPotencial.Areas.Cadastro.Models.Funcionarios.exame_medico", b =>
                {
                    b.HasOne("EspacoPotencial.Areas.Cadastro.Models.Funcionarios.funcionario", "Funcionario")
                        .WithMany()
                        .HasForeignKey("funcionario_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Funcionario");
                });

            modelBuilder.Entity("EspacoPotencial.Areas.Cadastro.Models.Funcionarios.funcionario", b =>
                {
                    b.HasOne("EspacoPotencial.Areas.Cadastro.Models.Funcionarios.banco", "banco")
                        .WithMany()
                        .HasForeignKey("banco_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EspacoPotencial.Areas.Cadastro.Models.Funcionarios.centro_custo", "centro_custo")
                        .WithMany()
                        .HasForeignKey("centrocusto_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EspacoPotencial.Areas.Cadastro.Models.Public.geral", "geral")
                        .WithMany()
                        .HasForeignKey("geral_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("banco");

                    b.Navigation("centro_custo");

                    b.Navigation("geral");
                });

            modelBuilder.Entity("EspacoPotencial.Areas.Cadastro.Models.Usuarios.calendario", b =>
                {
                    b.HasOne("EspacoPotencial.Areas.Cadastro.Models.Usuarios.datas", "Datas")
                        .WithMany()
                        .HasForeignKey("datas_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EspacoPotencial.Areas.Cadastro.Models.Usuarios.sala", "Salas")
                        .WithMany()
                        .HasForeignKey("sala_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Datas");

                    b.Navigation("Salas");
                });

            modelBuilder.Entity("EspacoPotencial.Areas.Cadastro.Models.Usuarios.comorbidade_usuario", b =>
                {
                    b.HasOne("EspacoPotencial.Areas.Cadastro.Models.Usuarios.comorbidade", "Comorbidade")
                        .WithMany()
                        .HasForeignKey("comorbidade_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EspacoPotencial.Areas.Cadastro.Models.Usuarios.usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("usuario_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Comorbidade");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("EspacoPotencial.Areas.Cadastro.Models.Usuarios.dias_terapia", b =>
                {
                    b.HasOne("EspacoPotencial.Areas.Cadastro.Models.Public.geral", "Geral")
                        .WithMany()
                        .HasForeignKey("geral_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Geral");
                });

            modelBuilder.Entity("EspacoPotencial.Areas.Cadastro.Models.Usuarios.educador_sala", b =>
                {
                    b.HasOne("EspacoPotencial.Areas.Cadastro.Models.Funcionarios.funcionario", "Funcionario")
                        .WithMany()
                        .HasForeignKey("funcionario_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EspacoPotencial.Areas.Cadastro.Models.Usuarios.sala", "Sala")
                        .WithMany()
                        .HasForeignKey("sala_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Funcionario");

                    b.Navigation("Sala");
                });

            modelBuilder.Entity("EspacoPotencial.Areas.Cadastro.Models.Usuarios.frequencia", b =>
                {
                    b.HasOne("EspacoPotencial.Areas.Cadastro.Models.Usuarios.sala", "Sala")
                        .WithMany()
                        .HasForeignKey("sala_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EspacoPotencial.Areas.Cadastro.Models.Usuarios.usuario_sala", "UsuarioSala")
                        .WithMany()
                        .HasForeignKey("usuario_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sala");

                    b.Navigation("UsuarioSala");
                });

            modelBuilder.Entity("EspacoPotencial.Areas.Cadastro.Models.Usuarios.responsavel", b =>
                {
                    b.HasOne("EspacoPotencial.Areas.Cadastro.Models.Funcionarios.funcionario", "Funcionario")
                        .WithMany()
                        .HasForeignKey("funcionario_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EspacoPotencial.Areas.Cadastro.Models.Public.geral", "Geral")
                        .WithMany()
                        .HasForeignKey("geral_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EspacoPotencial.Areas.Cadastro.Models.Usuarios.usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("usuario_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Funcionario");

                    b.Navigation("Geral");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("EspacoPotencial.Areas.Cadastro.Models.Usuarios.sala", b =>
                {
                    b.HasOne("EspacoPotencial.Areas.Cadastro.Models.Funcionarios.funcionario", "Funcionario")
                        .WithMany()
                        .HasForeignKey("funcionario_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Funcionario");
                });

            modelBuilder.Entity("EspacoPotencial.Areas.Cadastro.Models.Usuarios.salas_diario", b =>
                {
                    b.HasOne("EspacoPotencial.Areas.Cadastro.Models.Usuarios.sala", "Sala")
                        .WithMany()
                        .HasForeignKey("sala_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sala");
                });

            modelBuilder.Entity("EspacoPotencial.Areas.Cadastro.Models.Usuarios.usuario", b =>
                {
                    b.HasOne("EspacoPotencial.Areas.Cadastro.Models.Usuarios.beneficio", "Beneficio")
                        .WithMany()
                        .HasForeignKey("beneficio_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EspacoPotencial.Areas.Cadastro.Models.Usuarios.comorbidade", "Comorbidade")
                        .WithMany()
                        .HasForeignKey("comorbidade_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EspacoPotencial.Areas.Cadastro.Models.Usuarios.desligamento_motivos_usuario", "MotivoDesligamento")
                        .WithMany()
                        .HasForeignKey("desligamento_id");

                    b.HasOne("EspacoPotencial.Areas.Cadastro.Models.Usuarios.escolas", "Escola")
                        .WithMany()
                        .HasForeignKey("escolas_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EspacoPotencial.Areas.Cadastro.Models.Public.geral", "Geral")
                        .WithMany()
                        .HasForeignKey("geral_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Beneficio");

                    b.Navigation("Comorbidade");

                    b.Navigation("Escola");

                    b.Navigation("Geral");

                    b.Navigation("MotivoDesligamento");
                });

            modelBuilder.Entity("EspacoPotencial.Areas.Cadastro.Models.Usuarios.usuario_motorista", b =>
                {
                    b.HasOne("EspacoPotencial.Areas.Cadastro.Models.Usuarios.motorista", "Motorista")
                        .WithMany()
                        .HasForeignKey("motorista_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EspacoPotencial.Areas.Cadastro.Models.Usuarios.usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("usuario_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Motorista");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("EspacoPotencial.Areas.Cadastro.Models.Usuarios.usuario_sala", b =>
                {
                    b.HasOne("EspacoPotencial.Areas.Cadastro.Models.Public.geral", "Geral")
                        .WithMany()
                        .HasForeignKey("geral_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EspacoPotencial.Areas.Cadastro.Models.Usuarios.sala", "Sala")
                        .WithMany()
                        .HasForeignKey("sala_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EspacoPotencial.Areas.Cadastro.Models.Usuarios.usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("usuario_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Geral");

                    b.Navigation("Sala");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
